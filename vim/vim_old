" This is my original old config, use the new one, since I barely could work vim when I made this
"           ¦¦
"          ¦¦
"  ¦¦    ¦¦ ¦¦ ¦¦¦¦¦¦¦¦¦¦  ¦¦¦¦¦¦  ¦¦¦¦¦
" ¦¦¦   ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦
" ¦¦¦¦ ¦¦¦ ¦¦¦ ¦¦¦ ¦¦¦ ¦¦¦ ¦¦¦ ¦ ¦¦¦  ¦¦
"  ¦¦¦¦¦¦  ¦¦¦ ¦¦¦ ¦¦¦ ¦¦¦ ¦¦¦   ¦¦¦   ¦¦
"   ¦¦¦¦   ¦¦¦ ¦¦¦ ¦¦¦ ¦¦¦¦¦¦¦   ¦¦¦¦¦¦¦
"    ¦¦    ¦¦ ¦¦¦  ¦¦  ¦¦ ¦¦¦     ¦¦¦¦¦
"

" Jack's vimrc config

" vim:fdm=marker
" set fmd=marker

" General Settings {{{
" Use vim settings, rather than vi settings
" must be first, because it changes other options as a side effect
set nocompatible

" Security 
set modelines=0

" hide buffers, not close them
set hidden

" maintain undo history between sessions
set undofile
set undodir=~/.vim/undo
set noswapfile

" lazy file name tab completion
set wildmode=longest,list,full
set wildmenu
set wildignorecase
" ignore files vim doesnt use
set wildignore+=.git,.hg,.svn
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.divx,*.mp4,*.webm,*.mov,*.m2ts,*.mkv,*.vob,*.mpg,*.mpeg
set wildignore+=*.mp3,*.oga,*.ogg,*.wav,*.flac
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf,*.cbr,*.cbz
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz,*.kgb
set wildignore+=*.swp,.lock,.DS_Store,._*

" case insensitive search
set ignorecase
set smartcase
set infercase

" the /g flag on :s substitutions by default
set gdefault
set diffexpr=MyDiff()

" searching
set hlsearch
set incsearch

function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" Vim set indenting style
filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

syntax on
filetype plugin on
filetype plugin indent on

" allow nvim to use the clipboard
set clipboard+=unnamedplus

" set line numbers to display
set number

" make backspace behave in a sane manner
set backspace=indent,eol,start

" tabs are spaces, not tabs
set expandtab

" let backspace delete indent
set softtabstop=2

" enable auto indentation
set autoindent

" remove trailing whitespaces and ^M chars
autocmd FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

" let mapleader=","
vnoremap <silent> <leader>y :w !xsel -i -b<CR>
nnoremap <silent> <leader>y V:w !xsel -i -b<CR>
nnoremap <silent> <leader>p :silent :r !xsel -o -b<CR>

" set python
let g:python_host_prog = 'C:/Users/jack/Envs/neovim/Scripts/python.exe'
" }}} 
" Plugins {{{
call plug#begin()
Plug 'Raimondi/delimitMate'
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'kien/rainbow_parentheses.vim'
Plug 'scrooloose/syntastic'
Plug 'majutsushi/tagbar'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'kassio/neoterm'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"Plug 'mhinz/vim-startify'
Plug 'scrooloose/nerdcommenter'
Plug 'Shougo/neocomplcache'
Plug 'easymotion/vim-easymotion'
Plug 'dikiaap/minimalist'
Plug 'skywind3000/asyncrun.vim'
Plug 'vimwiki/vimwiki'

" Vim math stuff
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'plasticboy/vim-markdown'
call plug#end()
" }}}
" Plugin Settings {{{
"------------------------------------------------------------
" Vim-Airline Settings
"------------------------------------------------------------
 Allow vim-airline to show
set laststatus=2
" Smarter tab lines
let g:airline#extensions#tabline#enabled = 1
"let g:airline_theme="jellybeans"
"------------------------------------------------------------
" Vim rainbow-brackets settings 
"------------------------------------------------------------
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
"------------------------------------------------------------
" }}} 
" 
" }}} 
" Custom key mappings {{{
map <C-n> :NERDTreeToggle <CR>
map <C-b> :CtrlP <CR>
" }}}
" Appearence {{{
set t_Co=256
colorscheme minimalist
" }}}
" Bindings for neovim terminal {{{
:tnoremap <A-h> <C-\><C-n><C-w>h
:tnoremap <A-j> <C-\><C-n><C-w>j
:tnoremap <A-k> <C-\><C-n><C-w>k
:tnoremap <A-l> <C-\><C-n><C-w>l
:nnoremap <A-h> <C-w>h
:nnoremap <A-j> <C-w>j
:nnoremap <A-k> <C-w>k
:nnoremap <A-l> <C-w>l
" }}}

" Quick run via <F5>
nnoremap <F5> :call <SID>compile_and_run()<CR>

augroup SPACEVIM_ASYNCRUN
    autocmd!
    " Automatically open the quickfix window
    autocmd User AsyncRunStart call asyncrun#quickfix_toggle(15, 1)
augroup END
"Custom functions {{{
function! s:compile_and_run()
    exec 'w'
    if &filetype == 'c'
        exec "AsyncRun! gcc % -o %<; time ./%<"
    elseif &filetype == 'cpp'
       exec "AsyncRun! g++ -std=c++11 % -o %<; time ./%<"
    elseif &filetype == 'java'
       exec "AsyncRun! javac %; time java %<"
    elseif &filetype == 'sh'
       exec "AsyncRun! time bash %"
    elseif &filetype == 'python'
       exec "AsyncRun! time python %"
    endif
endfunction
" }}}

